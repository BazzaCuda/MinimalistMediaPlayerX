uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Winapi.MF,
  Winapi.MFMediaEngine, Winapi.MFPlay, Winapi.MFIdl, Winapi.MFObjects;

type
  TForm1 = class(TForm)
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    { Private declarations }
    FMediaSession: IMFMediaSession;
    FMediaSource: IMFMediaSource;
    FPresentationDescriptor: IMFPresentationDescriptor;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
var
  StreamCount: DWORD;
  i: DWORD;
  StreamDescriptor: IMFStreamDescriptor;
  MediaTypeHandler: IMFMediaTypeHandler;
begin
  // Step 1: Initialize Media Foundation framework.
  MFStartup(MF_VERSION);

  // Step 2: Open the media source.
  MFCreateSourceFromURL('example.mp4', nil, FMediaSource);
  FMediaSource.CreatePresentationDescriptor(FPresentationDescriptor);

  // Step 3: Get the number of streams.
  FPresentationDescriptor.GetStreamDescriptorCount(StreamCount);

  // Step 4: Iterate through each stream descriptor.
  for i := 0 to StreamCount - 1 do
  begin
    FPresentationDescriptor.GetStreamDescriptorByIndex(i, nil, StreamDescriptor);

    // Step 5: Get information about the stream.
    StreamDescriptor.GetMediaTypeHandler(MediaTypeHandler);

    // Access additional properties/methods of the media type handler if needed.

    // Clean up stream descriptor and media type handler.
    MediaTypeHandler._Release;
    StreamDescriptor._Release;
  end;

  // Step 6: Retrieve additional information about the media source.

  // Clean up.
  FPresentationDescriptor._Release;
  FMediaSource._Release;
  FMediaSession.Shutdown;
  FMediaSession._Release;

  // Shutdown Media Foundation.
  MFShutdown;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  // Release interfaces if they haven't been released yet to avoid memory leaks.
  if Assigned(FPresentationDescriptor) then
    FPresentationDescriptor._Release;
  if Assigned(FMediaSource) then
    FMediaSource._Release;
  if Assigned(FMediaSession) then
    FMediaSession._Release;
end;

end.




uses
  // Other units...

type
  TForm1 = class(TForm)
    // Form declaration...

  private
    // Private declarations...
    procedure GetVideoBitrate(const MediaTypeHandler: IMFMediaTypeHandler);
  public
    // Public declarations...
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.GetVideoBitrate(const MediaTypeHandler: IMFMediaTypeHandler);
var
  CurrentMediaType: IMFMediaType;
  VideoMediaTypeHandler: IMFVideoMediaTypeHandler;
  Bitrate: UINT32;
begin
  if MediaTypeHandler.QueryInterface(IMFVideoMediaTypeHandler, VideoMediaTypeHandler) = S_OK then
  begin
    VideoMediaTypeHandler.GetCurrentMediaType(CurrentMediaType);
    CurrentMediaType.GetUINT32(MF_MT_AVG_BITRATE, Bitrate);

    // Use the video bitrate as needed...

    CurrentMediaType._Release;
    VideoMediaTypeHandler._Release;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
  StreamCount: DWORD;
  i: DWORD;
  StreamDescriptor: IMFStreamDescriptor;
  MediaTypeHandler: IMFMediaTypeHandler;
begin
  // Other code...

  // Step 4: Iterate through each stream descriptor.
  for i := 0 to StreamCount - 1 do
  begin
    // Other code...

    // Step 5: Get information about the stream.
    StreamDescriptor.GetMediaTypeHandler(MediaTypeHandler);

    // Get video bitrate (if it is a video media type handler).
    GetVideoBitrate(MediaTypeHandler);

    // Other code...

    // Clean up stream descriptor and media type handler.
    MediaTypeHandler._Release;
    StreamDescriptor._Release;
  end;

  // Other code...
end;

// Other code...





uses
  Winapi.Windows,
  Winapi.ActiveX,
  System.SysUtils,
  System.Classes,
  Winapi.MFObjects,
  Winapi.MFMediaEngine;

procedure GetVideoBitrate(pSourceReader: IMFSourceReader);
var
  dwMediaTypeIndex: DWORD;
  pMediaType: IMFMediaType;
  pHandler: IMFMediaTypeHandler;
  majorType: TGUID;
  videoBitrate: UINT32;
begin
  dwMediaTypeIndex := 0;
  pMediaType := nil;
  pHandler := nil;

  // Get the media type handler for the first stream
  if Succeeded(pSourceReader.GetStreamSelection(dwMediaTypeIndex, pHandler)) then
  begin
    // Get the current media type
    if Succeeded(pHandler.GetCurrentMediaType(pMediaType)) then
    begin
      if Succeeded(pMediaType.GetMajorType(majorType)) and (majorType = MFMediaType_Video) then
      begin
        if Succeeded(pMediaType.GetUINT32(MF_MT_AVG_BITRATE, videoBitrate)) then
        begin
          Writeln('Video Bitrate: ', videoBitrate, ' bps');
        end;
      end;
    end;
  end;

  // Clean up
  if Assigned(pMediaType) then
    pMediaType._Release;
  if Assigned(pHandler) then
    pHandler._Release;
end;

procedure Main;
var
  pSourceReader: IMFSourceReader;
  hr: HRESULT;
begin
  // Initialize COM
  if Failed(CoInitializeEx(nil, COINIT_APARTMENTTHREADED or COINIT_DISABLE_OLE1DDE)) then
    Exit;

  // Initialize Media Foundation
  if Failed(MFStartup(MF_VERSION)) then
  begin
    CoUninitialize;
    Exit;
  end;

  pSourceReader := nil;

  try
    // Create the media source reader
    hr := MFCreateSourceReaderFromURL('example.mp4', nil, pSourceReader);
    if Succeeded(hr) then
    begin
      // Configure the source reader
      hr := pSourceReader.SetStreamSelection(MF_SOURCE_READER_ALL_STREAMS, FALSE);
      if Succeeded(hr) then
      begin
        hr := pSourceReader.SetStreamSelection(MF_SOURCE_READER_FIRST_VIDEO_STREAM, TRUE);
        if Succeeded(hr) then
        begin
          // Get video bitrate
          GetVideoBitrate(pSourceReader);
        end;
      end;
    end;
  finally
    // Clean up
    if Assigned(pSourceReader) then
      pSourceReader._Release;

    // Shut down Media Foundation
    MFLockPlatform;
    MFShutdown;
    MFUnlockPlatform;

    // Uninitialize COM
    CoUninitialize;
  end;
end;

begin
  Main;
end.

uses
  ..., FFmpeg;

...

// Initialize the Delphi-FFmpeg wrapper
FFmpeg.av_register_all;

// Open the video file
var
  Input: TFFmpegInput;
begin
  Input := TFFmpegInput.Create('path/to/your/file');
  try
    // Retrieve the frame rate
    if Input.HasVideo then
    begin
      var FrameRate: Double := Input.VideoStream.FrameRate;
      // FrameRate variable now contains the video frame rate
    end;
  finally
    Input.Free;
  end;
end;



program MediaInfoExample;

{$APPTYPE CONSOLE}

uses
  SysUtils,
  MediaInfoDLL;

procedure PrintMediaInfo(const FileName: string);
var
  Handle: Cardinal;
  FileInfo: string;
begin
  // Create a new MediaInfo handle
  Handle := MediaInfo_New();
  try
    // Open the video file
    FileInfo := MediaInfo_Open(Handle, PChar(FileName));
    if FileInfo = '' then
    begin
      // Retrieve and print basic information
      Writeln('File: ', MediaInfo_Get(Handle, Stream_General, 0, Info_Text, Info_Name, InfoKind_Text));
      Writeln('Duration: ', MediaInfo_Get(Handle, Stream_General, 0, Info_Text, 'Duration/String3', InfoKind_Text));
      Writeln('Bit rate: ', MediaInfo_Get(Handle, Stream_General, 0, Info_Text, 'OverallBitRate/String', InfoKind_Text));
      Writeln('Format: ', MediaInfo_Get(Handle, Stream_General, 0, Info_Text, 'Format', InfoKind_Text));
    end
    else
      Writeln('Error opening file: ', FileInfo);

    // Close the video file
    MediaInfo_Close(Handle);
  finally
    // Delete the MediaInfo handle
    MediaInfo_Delete(Handle);
  end;
end;

begin
  try
    // Initialize MediaInfo DLL
    MediaInfoDLL_Load();

    // Specify the video file path
    PrintMediaInfo('C:\Path\to\your\video.mp4');

    // Unload MediaInfo DLL
    MediaInfoDLL_Unload();
  except
    on E: Exception do
      Writeln('Exception: ', E.ClassName, ', ', E.Message);
  end;

  Writeln('Press Enter to exit...');
  Readln;
end.

























